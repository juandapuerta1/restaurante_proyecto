"""
Sistema de Gesti√≥n de Restaurante - API REST con FastAPI
"""

from contextlib import asynccontextmanager
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
import uvicorn

from database.config import create_tables, test_connection


# Lifespan event handler (reemplaza on_event)
@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Maneja el ciclo de vida de la aplicaci√≥n
    """
    # Startup
    print("üöÄ Iniciando Sistema de Gesti√≥n de Restaurante...")

    # Verificar conexi√≥n a la base de datos
    if test_connection():
        print("‚úÖ Conexi√≥n a la base de datos exitosa")
    else:
        print("‚ùå Error de conexi√≥n a la base de datos")

    # Crear tablas si no existen
    try:
        create_tables()
        print("‚úÖ Tablas verificadas/creadas correctamente")
    except Exception as e:
        print(f"‚ùå Error al crear tablas: {e}")

    yield  # La aplicaci√≥n se ejecuta aqu√≠

    # Shutdown
    print("üëã Cerrando Sistema de Gesti√≥n de Restaurante...")


# Crear instancia de FastAPI con lifespan
app = FastAPI(
    title="Sistema de Gesti√≥n de Restaurante",
    description="API REST para gestionar restaurantes, reservas, men√∫s y m√°s",
    version="1.0.0",
    docs_url="/docs",  # Swagger UI en /docs
    redoc_url="/redoc",  # ReDoc en /redoc
    lifespan=lifespan,
)

# Configurar CORS (permitir peticiones desde el frontend)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # En producci√≥n, especifica los dominios permitidos
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# Ruta ra√≠z
@app.get("/", tags=["General"])
async def root():
    """
    Endpoint ra√≠z - informaci√≥n general de la API
    """
    return {
        "mensaje": "Bienvenido al Sistema de Gesti√≥n de Restaurante",
        "version": "1.0.0",
        "documentacion": "/docs",
        "redoc": "/redoc",
        "endpoints_disponibles": {
            "usuarios": "/usuarios",
            "categorias": "/categorias",
            "restaurantes": "/restaurantes (pr√≥ximamente)",
            "mesas": "/mesas (pr√≥ximamente)",
            "reservas": "/reservas (pr√≥ximamente)",
            "menu": "/menu (pr√≥ximamente)",
        },
    }


# Health check
@app.get("/health", tags=["General"])
async def health_check():
    """
    Endpoint para verificar el estado de la API
    """
    return {
        "status": "OK",
        "database": "conectada" if test_connection() else "desconectada",
    }


# Incluir routers de endpoints
try:
    from api.endpoints import usuarios

    app.include_router(usuarios.router)
    print("‚úÖ Router de usuarios cargado")
except Exception as e:
    print(f"‚ö†Ô∏è No se pudo cargar router de usuarios: {e}")

try:
    from api.endpoints import categorias

    app.include_router(categorias.router)
    print("‚úÖ Router de categor√≠as cargado")
except Exception as e:
    print(f"‚ö†Ô∏è No se pudo cargar router de categor√≠as: {e}")

# Cuando crees los dem√°s endpoints, los incluyes as√≠:
# try:
#     from api.endpoints import restaurantes
#     app.include_router(restaurantes.router)
# except Exception as e:
#     print(f"‚ö†Ô∏è No se pudo cargar router de restaurantes: {e}")


# Configuraci√≥n de Uvicorn para ejecutar la aplicaci√≥n
if __name__ == "__main__":
    uvicorn.run(
        "main:app",  # Archivo:variable
        host="0.0.0.0",  # Escuchar en todas las interfaces
        port=8000,  # Puerto
        reload=True,  # Auto-reload en desarrollo (cambios en c√≥digo)
        log_level="info",
    )
